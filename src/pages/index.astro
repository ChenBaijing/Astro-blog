---
import BaseLayout from '../layouts/BaseLayout.astro';
const pageTitle = "首页";
const allPosts = await Astro.glob('../pages/posts/*.md');

// 模拟一些博客文章数据
// const recentPosts = [
//   { title: "示例文章 1", excerpt: "这是一篇示例文章的摘要...", date: "2024-03-20" },
//   { title: "示例文章 2", excerpt: "这是另一篇示例文章的摘要...", date: "2024-03-19" },
//   { title: "示例文章 3", excerpt: "第三篇示例文章的摘要...", date: "2024-03-18" },
// ];

const sortedPosts = allPosts
  .map(post => ({
    ...post,
    pubDateTimestamp: new Date(post.frontmatter.pubDate).getTime()
  }))
  .sort((a, b) => b.pubDateTimestamp - a.pubDateTimestamp)
  .splice(0, 3); 

---

<BaseLayout pageTitle={pageTitle}>
  <main class="container">
    <section class="hero">
      <div class="terminal">
        <h1 class="title" id="terminal-text"></h1>
      </div>
      <p class="subtitle"></p>
    </section>

    <section class="recent-posts">
      <h2>最新文章</h2>
      <div class="posts-grid">
        {sortedPosts.map(post => (
          <article class="post-card">
            <div class="post-meta">
              <div class="meta-left">
                <time datetime={post.frontmatter.pubDate}>
                  {new Date(post.frontmatter.pubDate).toLocaleDateString('zh-CN', {
                    year: 'numeric',
                    month: 'long',
                    day: 'numeric'
                  })}
                </time>
              </div>
              {post.frontmatter.tags && (
                <div class="meta-right">
                  <div class="post-tags">
                    {post.frontmatter.tags.slice(0, 3).map((tag: string) => (
                      <a href={`/Astro-blog/tags/${tag}`} class="tag" title={tag}>
                        <span class="tag-text">{tag}</span>
                      </a>
                    ))}
                    {post.frontmatter.tags.length > 3 && (
                      <span class="tag more-tag" title={post.frontmatter.tags.slice(3).join(', ')}>
                        +{post.frontmatter.tags.length - 3}
                      </span>
                    )}
                  </div>
                </div>
              )}
            </div>
            <h3>{post.frontmatter.title}</h3>
            <p>{post.frontmatter.description}</p>
            <a href={post.url} class="read-more">阅读更多 →</a>
          </article>
        ))}
      </div>
    </section>
  </main>
</BaseLayout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
  }

  .hero {
    text-align: center;
    padding: 3rem 0;
    background: linear-gradient(135deg, rgba(255,255,255,0.1) 0%, rgba(255,255,255,0.05) 100%);
    border-radius: 1rem;
    background-color: transparent;
  }

  .title {
    font-size: 4rem;
    margin-bottom: 1rem;
    background: var(--accent-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 400%;
    background-position: 0%;
  }

  .terminal {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    justify-content: center;
    font-family: 'Courier New', Courier, monospace;
  }

  .prompt {
    font-weight: bold;
    font-size: 3rem; 
    line-height: 1;
    text-shadow: 0 0 10px rgba(80, 250, 123, 0.3); 
  }

  .title {
    font-size: 4rem;
    margin: 0;
    display: inline;
    color: #bd93f9;
  }

  .cursor {
    font-size: 4rem;
    animation: blink 1s step-end infinite;
  }

  @keyframes blink {
    from, to {
      opacity: 1;
    }
    50% {
      opacity: 0;
    }
  }


  .subtitle {
    font-size: 1.2rem;
    margin-top: 1rem;
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
    margin-top: 2rem;
  }

  .post-card {
    background: rgba(255, 255, 255, 0.05);
    border-radius: 1rem;
    padding: 1.5rem;
    transition: transform 0.3s ease;
    border: 1px solid rgba(255, 255, 255, 0.1);
    position: relative;
    overflow: hidden;
  }

  .post-card:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.1);
  }

  .post-date {
    font-size: 0.9rem;
    margin-bottom: 1rem;
  }

  .post-card h3 {
    margin: 0 0 1rem 0;
    font-size: 1.5rem;
  }

  .read-more {
    display: inline-block;
    margin-top: 1rem;
    color: var(--accent);
    text-decoration: none;
    transition: transform 0.2s ease;
  }

  .read-more:hover {
    transform: translateX(5px);
  }

  @media (max-width: 768px) {
    .container {
      padding: 1rem;
    }
    
    .hero {
      padding: 2rem 1rem;
    }

    .title {
      font-size: 2rem;
    }

    .posts-grid {
      grid-template-columns: 1fr;
    }
  }
.post-meta {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1rem;
    font-size: 0.9rem;
    min-height: 24px;
  }

  .meta-left {
    flex-shrink: 0;
    margin-right: 1rem;
    white-space: nowrap;
  }

  .meta-right {
    flex-grow: 1;
    min-width: 0;
    overflow: hidden;
  }

  .post-tags {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
    flex-wrap: nowrap;
    overflow: hidden;
    width: 100%;
  }

  .tag {
    display: inline-flex;
    align-items: center;
    padding: 0.2rem 0.8rem;
    background: rgba(var(--accent-rgb), 0.1);
    border-radius: 1rem;
    color: var(--accent);
    text-decoration: none;
    font-size: 0.8rem;
    transition: all 0.3s ease;
    max-width: 100px;
    position: relative;
    overflow: hidden;
  }

  .tag-text {
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .tag:hover {
    background: var(--accent);
    color: white;
  }

  .more-tag {
    padding: 0.2rem 0.6rem;
    background: rgba(var(--accent-rgb), 0.05);
    cursor: help;
  }

  .tag[title]:hover::after {
    content: attr(title);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    padding: 0.4rem 0.8rem;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    border-radius: 4px;
    font-size: 0.8rem;
    white-space: nowrap;
    margin-bottom: 8px;
    z-index: 1000;
  }
  
</style>

<script>
  function typeText(text: string, element: HTMLElement, speed: number = 100) {
    let index = 0;
    const cursor = document.querySelector('.cursor');
    function type() {
      if (index < text.length) {
        element.textContent += text.charAt(index);
        index++;
        setTimeout(type, speed);
      }else {
        // 文字输入完成后，移除光标
        if (cursor) {
          (cursor as HTMLElement).style.opacity = '0';
          (cursor as HTMLElement).style.transition = 'opacity 0.5s';
        }
      }
    }
    
    type();
  }

  // 等待页面加载完成后开始动画
  document.addEventListener('DOMContentLoaded', () => {
    const terminalText = document.getElementById('terminal-text');
    if (terminalText) {
      typeText('./Hello', terminalText, 150);
    }
  });
</script>