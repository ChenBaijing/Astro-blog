---
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const allPosts = await Astro.glob('../posts/*.md');
  const uniqueTags = [...new Set(allPosts.map((post) => post.frontmatter.tags).flat())];
  
  return uniqueTags.map((tag) => {
    const filteredPosts = allPosts.filter((post) => post.frontmatter.tags.includes(tag));
    return {
      params: { tag },
      props: { posts: filteredPosts },
    };
  });
}

const { tag } = Astro.params;
const { posts } = Astro.props;

// 获取标签所属的分类
const tagCategories = {
  "前端开发": ["JavaScript", "TypeScript", "React", "Vue"],
  "后端开发": ["Node.js", "Python", "Java", "数据库"],
  "开发工具": ["Git", "Docker", "VS Code", "命令行"],
  "其他": ["随笔", "生活", "阅读"]
};

const getTagCategory = (tag) => {
  for (const [category, tags] of Object.entries(tagCategories)) {
    if (tags.includes(tag)) return category;
  }
  return "其他";
};

const category = getTagCategory(tag);

// 按日期排序文章
const sortedPosts = posts.sort((a, b) => 
  new Date(b.frontmatter.pubDate).getTime() - new Date(a.frontmatter.pubDate).getTime()
);
---

<BaseLayout pageTitle={`标签: ${tag}`}>
  <main class="tag-posts-container">
    <header class="tag-header">
      <div class="tag-info">
        <div class="category-badge" title={category}>{category}</div>
        <h1 class="tag-title">
          <span class="tag-label" title={tag}>{tag}</span>
          <span class="post-count">{posts.length} 篇文章</span>
        </h1>
      </div>
      <a href="/tags" class="back-link">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M19 12H5M12 19l-7-7 7-7"/>
        </svg>
        返回标签页
      </a>
    </header>

    <div class="posts-grid">
      {sortedPosts.map((post) => (
        <article class="post-card">
          <a href={post.url} class="post-link">
            <div class="post-content">
              <h2 class="post-title">{post.frontmatter.title}</h2>
              <p class="post-excerpt">{post.frontmatter.description || '暂无描述'}</p>
              <div class="post-meta">
                <time class="post-date" datetime={post.frontmatter.pubDate}>
                  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                    <line x1="16" y1="2" x2="16" y2="6"></line>
                    <line x1="8" y1="2" x2="8" y2="6"></line>
                    <line x1="3" y1="10" x2="21" y2="10"></line>
                  </svg>
                  {new Date(post.frontmatter.pubDate).toLocaleDateString('zh-CN', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric'
                  })}
                </time>
                <div class="post-tags">
                  {post.frontmatter.tags.map((t) => (
                    <span 
                      class={`tag-chip ${t === tag ? 'active' : ''}`}
                      title={t}
                    >
                      {t}
                    </span>
                  ))}
                </div>
              </div>
            </div>
          </a>
        </article>
      ))}
    </div>
  </main>
</BaseLayout>

<style>
  .tag-posts-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    animation: fadeIn 0.5s ease;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .tag-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 3rem;
    padding-bottom: 1.5rem;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
  }

  .tag-info {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .category-badge {
    display: inline-block;
    padding: 0.3rem 1rem;
    background: rgba(var(--accent-rgb), 0.1);
    color: var(--accent);
    border-radius: 20px;
    font-size: 0.9rem;
    max-width: 200px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .tag-title {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin: 0;
    font-size: 2rem;
    color: var(--text-primary);
  }

  .tag-label {
    max-width: 300px;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }

  .post-count {
    font-size: 1rem;
    font-weight: normal;
  }

  .back-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    transition: all 0.2s ease;
    padding: 0.5rem 1rem;
    border-radius: 20px;
  }

  .back-link:hover {
    color: var(--accent);
    background: rgba(var(--accent-rgb), 0.1);
  }

  .back-link svg {
    width: 20px;
    height: 20px;
  }

  .posts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
    gap: 2rem;
  }

  .post-card {
    background: rgba(255, 255, 255, 0.03);
    border-radius: 12px;
    overflow: hidden;
    transition: all 0.3s ease;
    animation: fadeIn 0.5s ease backwards;
  }

  .post-card:hover {
    transform: translateY(-5px);
    background: rgba(255, 255, 255, 0.05);
  }

  .post-link {
    text-decoration: none;
    color: inherit;
  }

  .post-content {
    padding: 1.5rem;
  }

  .post-title {
    margin: 0 0 1rem 0;
    font-size: 1.3rem;
    color: var(--text-primary);
    line-height: 1.4;
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
  }

  .post-excerpt {
    margin: 0 0 1.5rem 0;
    font-size: 0.95rem;
    line-height: 1.6;
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .post-meta {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    align-items: center;
    font-size: 0.9rem;
    margin-top: 1rem;
  }

  .post-date {
    display: flex;
    align-items: center;
    gap: 0.3rem;
  }

  .post-date svg {
    width: 16px;
    height: 16px;
  }

  .post-tags {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
    max-width: 100%;
  }

  .tag-chip {
    padding: 0.2rem 0.6rem;
    background: rgba(var(--accent-rgb), 0.1);
    border-radius: 12px;
    font-size: 0.8rem;
    color: var(--accent);
    max-width: 150px;
    white-space: nowrap;
    overflow: hidden;
    text-overflow: ellipsis;
    transition: all 0.2s ease;
    position: relative;
  }

  .tag-chip.active {
    background: var(--accent);
    color: white;
  }

  .tag-chip:hover {
    background: var(--accent);
    color: white;
  }

  .tag-chip[title]:hover::after {
    content: attr(title);
    position: absolute;
    bottom: 100%;
    left: 50%;
    transform: translateX(-50%);
    padding: 0.3rem 0.6rem;
    background: rgba(0, 0, 0, 0.8);
    color: white;
    border-radius: 6px;
    font-size: 0.8rem;
    white-space: nowrap;
    z-index: 1000;
    margin-bottom: 5px;
  }

  @media (max-width: 768px) {
    .tag-posts-container {
      padding: 1rem;
    }

    .tag-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .tag-title {
      font-size: 1.5rem;
    }

    .tag-label {
      max-width: 200px;
    }

    .posts-grid {
      grid-template-columns: 1fr;
    }

    .post-meta {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.8rem;
    }

    .tag-chip {
      max-width: 120px;
    }
  }
</style>

<script>
  // 添加文章卡片的交错动画
  const cards = document.querySelectorAll('.post-card');
  cards.forEach((card, index) => {
    (card as HTMLElement).style.animationDelay = `${index * 0.1}s`;
  });
</script>